{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Luna","text":"<p>Welcome to the official documentation for the Luna project.</p> <p>For a full API reference, please visit the API Reference section.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a quick example to get you started:</p> <p>```python from luna.led_controller import LEDController import time</p> <p>led = LEDController(pin=9)</p> <p>try:     print(\"Blinking the LED...\")     led.blink(times=5, delay=1) finally:     led.cleanup()</p>"},{"location":"api/","title":"API Reference","text":"<p>main.py</p>"},{"location":"api/#luna.main.main","title":"<code>main()</code>","text":"<p>Main function that runs the project.</p> Source code in <code>src/luna/main.py</code> <pre><code>def main():\n    \"\"\"Main function that runs the project.\"\"\"\n\n    led = LEDController(pin=9)\n    led.blink()\n    led.cleanup()\n    hello_world()\n</code></pre>"},{"location":"reference/","title":"API Reference","text":"<p>This section contains the API documentation for the <code>luna</code> package.</p> <ul> <li><code>luna.main</code></li> <li><code>luna</code></li> <li><code>luna.hello</code></li> <li><code>luna.led_controller</code></li> </ul>"},{"location":"reference/luna/","title":"<code>luna</code>","text":""},{"location":"reference/luna/hello/","title":"<code>luna.hello</code>","text":"<p>hello.py</p> <p>This module provides a simple hello_world function for demonstration purposes.</p>"},{"location":"reference/luna/hello/#luna.hello.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints 'Hello, World!' to the console.</p> Example <p>from my_rpi_project.hello import hello_world hello_world() Hello, World!</p> Source code in <code>src/luna/hello.py</code> <pre><code>def hello_world():\n    \"\"\"\n    Prints 'Hello, World!' to the console.\n\n    Example:\n        &gt;&gt;&gt; from my_rpi_project.hello import hello_world\n        &gt;&gt;&gt; hello_world()\n        Hello, World!\n    \"\"\"\n    print(\"Hello, World!\")\n</code></pre>"},{"location":"reference/luna/led_controller/","title":"<code>luna.led_controller</code>","text":""},{"location":"reference/luna/led_controller/#luna.led_controller.LEDController","title":"<code>LEDController</code>","text":"<p>A class to control an LED connected to a Raspberry Pi GPIO pin.</p> <p>This class provides methods to initialize, control, and clean up the GPIO pin used for an LED.</p> <p>Parameters:</p> Name Type Description Default <code>pin</code> <code>int</code> <p>The GPIO pin number in BCM mode. Defaults to 18.</p> <code>18</code> Source code in <code>src/luna/led_controller.py</code> <pre><code>class LEDController:\n    \"\"\"A class to control an LED connected to a Raspberry Pi GPIO pin.\n\n    This class provides methods to initialize, control, and clean up\n    the GPIO pin used for an LED.\n\n    Args:\n        pin (int, optional): The GPIO pin number in BCM mode. Defaults to 18.\n    \"\"\"\n    def __init__(self, pin=18):\n        self.pin = pin\n        GPIO.setmode(GPIO.BCM)\n        GPIO.setup(self.pin, GPIO.OUT)\n\n    def blink(self, times=5, delay=1):\n        \"\"\"Blinks the LED a specified number of times with a given delay.\n\n        Args:\n            times (int, optional): The number of times to blink the LED.\n                Defaults to 5.\n            delay (int, optional): The delay in seconds between blinks.\n                Defaults to 1.\n\n        Example:\n            ```python\n            from luna.led_controller import LEDController\n            import time\n\n            # Create an instance of the LEDController\n            led = LEDController(pin=18)\n\n            # Blink the LED 5 times with a 1-second delay\n            led.blink(times=5, delay=1)\n\n            # Note: A real-world application would use a try...finally block for cleanup\n            ```\n        \"\"\"\n        for _ in range(times):\n            GPIO.output(self.pin, GPIO.HIGH)\n            time.sleep(delay)\n            GPIO.output(self.pin, GPIO.LOW)\n            time.sleep(delay)\n\n    def cleanup(self):\n        \"\"\"Cleans up the GPIO settings.\n\n        This should be called at the end of the script to release the\n        GPIO pin and prevent potential errors in future programs.\n\n        Example:\n            ```python\n            from luna.led_controller import LEDController\n\n            led = LEDController(pin=18)\n\n            try:\n                # Run some code that uses the LED\n                led.blink(times=2)\n            finally:\n                # Always clean up the GPIO settings\n                led.cleanup()\n            ```\n        \"\"\"\n        GPIO.cleanup()\n</code></pre>"},{"location":"reference/luna/led_controller/#luna.led_controller.LEDController.blink","title":"<code>blink(times=5, delay=1)</code>","text":"<p>Blinks the LED a specified number of times with a given delay.</p> <p>Parameters:</p> Name Type Description Default <code>times</code> <code>int</code> <p>The number of times to blink the LED. Defaults to 5.</p> <code>5</code> <code>delay</code> <code>int</code> <p>The delay in seconds between blinks. Defaults to 1.</p> <code>1</code> Example <pre><code>from luna.led_controller import LEDController\nimport time\n\n# Create an instance of the LEDController\nled = LEDController(pin=18)\n\n# Blink the LED 5 times with a 1-second delay\nled.blink(times=5, delay=1)\n\n# Note: A real-world application would use a try...finally block for cleanup\n</code></pre> Source code in <code>src/luna/led_controller.py</code> <pre><code>def blink(self, times=5, delay=1):\n    \"\"\"Blinks the LED a specified number of times with a given delay.\n\n    Args:\n        times (int, optional): The number of times to blink the LED.\n            Defaults to 5.\n        delay (int, optional): The delay in seconds between blinks.\n            Defaults to 1.\n\n    Example:\n        ```python\n        from luna.led_controller import LEDController\n        import time\n\n        # Create an instance of the LEDController\n        led = LEDController(pin=18)\n\n        # Blink the LED 5 times with a 1-second delay\n        led.blink(times=5, delay=1)\n\n        # Note: A real-world application would use a try...finally block for cleanup\n        ```\n    \"\"\"\n    for _ in range(times):\n        GPIO.output(self.pin, GPIO.HIGH)\n        time.sleep(delay)\n        GPIO.output(self.pin, GPIO.LOW)\n        time.sleep(delay)\n</code></pre>"},{"location":"reference/luna/led_controller/#luna.led_controller.LEDController.cleanup","title":"<code>cleanup()</code>","text":"<p>Cleans up the GPIO settings.</p> <p>This should be called at the end of the script to release the GPIO pin and prevent potential errors in future programs.</p> Example <pre><code>from luna.led_controller import LEDController\n\nled = LEDController(pin=18)\n\ntry:\n    # Run some code that uses the LED\n    led.blink(times=2)\nfinally:\n    # Always clean up the GPIO settings\n    led.cleanup()\n</code></pre> Source code in <code>src/luna/led_controller.py</code> <pre><code>def cleanup(self):\n    \"\"\"Cleans up the GPIO settings.\n\n    This should be called at the end of the script to release the\n    GPIO pin and prevent potential errors in future programs.\n\n    Example:\n        ```python\n        from luna.led_controller import LEDController\n\n        led = LEDController(pin=18)\n\n        try:\n            # Run some code that uses the LED\n            led.blink(times=2)\n        finally:\n            # Always clean up the GPIO settings\n            led.cleanup()\n        ```\n    \"\"\"\n    GPIO.cleanup()\n</code></pre>"},{"location":"reference/luna/main/","title":"<code>luna.main</code>","text":"<p>main.py</p>"},{"location":"reference/luna/main/#luna.main.main","title":"<code>main()</code>","text":"<p>Main function that runs the project.</p> Source code in <code>src/luna/main.py</code> <pre><code>def main():\n    \"\"\"Main function that runs the project.\"\"\"\n\n    led = LEDController(pin=9)\n    led.blink()\n    led.cleanup()\n    hello_world()\n</code></pre>"}]}